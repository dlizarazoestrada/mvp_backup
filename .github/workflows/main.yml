name: build-mac

on:
  workflow_dispatch: {}

jobs:
  mac-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: mvp
          python-version: 3.11
          auto-update-conda: true

      - name: Create mac Python env and pack
        shell: bash -l {0}
        run: |
          # Install core scientific packages and system libraries from conda-forge
          conda install -c conda-forge "libblas=*=*openblas" "liblapack=*=*openblas" numpy scipy xz liblzma openblas veclib -y
          # Ensure all dependencies are included
          conda install -c conda-forge --only-deps numpy scipy -y
          
          # Install remaining requirements
          pip install -r backend/requirements.txt
          
          # Pack environment with all dependencies
          conda install -y conda-pack
          conda pack -n mvp -o mvp-env.tar.gz
          
          # Extract and prepare environment
          mkdir -p desktop/resources/python-env
          tar -xzf mvp-env.tar.gz -C desktop/resources/python-env
          
          # Fix permissions and paths
          chmod +x desktop/resources/python-env/bin/*
          cd desktop/resources/python-env
          ./bin/conda-unpack
          
          # Verify numpy and its dependencies
          ./bin/python -c "
          import numpy as np
          import os
          print('NumPy version:', np.__version__)
          print('NumPy location:', np.__file__)
          print('OpenBLAS location:', [f for f in os.listdir('./lib') if 'openblas' in f.lower()])
          "

      - name: Prepare app resources
        run: |
          mkdir -p desktop/resources/app
          cp -R backend desktop/resources/app/backend
          cp -R frontend desktop/resources/app/frontend

      - name: Write .env for packaged app (from GitHub Secrets/Vars)
        run: |
          : > desktop/.env
          echo "USE_MOCK_SERVER=${{ vars.USE_MOCK_SERVER || 'false' }}" >> desktop/.env
          echo "LOG_VERBOSE=${{ vars.LOG_VERBOSE || '2' }}" >> desktop/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> desktop/.env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> desktop/.env


      - name: Install desktop deps
        working-directory: desktop
        run: npm ci || npm i

      - name: Build mac artifact (arm64, unsigned)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          BUILD_BLOCKMAP: 'false'
        working-directory: desktop
        run: npx electron-builder --mac --arm64 --publish=never -c.compression=store

      - name: Upload artifact (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: mac-build-arm64
          path: desktop/dist/*

  mac-x64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: mvp
          python-version: 3.11
          auto-update-conda: true

      - name: Create mac Python env and pack (x64)
        shell: bash -l {0}
        run: |
          # Install core scientific packages and system libraries from conda-forge
          conda install -c conda-forge "libblas=*=*openblas" "liblapack=*=*openblas" numpy scipy xz liblzma openblas veclib -y
          # Ensure all dependencies are included
          conda install -c conda-forge --only-deps numpy scipy -y
          
          # Install remaining requirements
          pip install -r backend/requirements.txt
          
          # Pack environment with all dependencies
          conda install -y conda-pack
          conda pack -n mvp -o mvp-env.tar.gz
          
          # Extract and prepare environment
          mkdir -p desktop/resources/python-env
          tar -xzf mvp-env.tar.gz -C desktop/resources/python-env
          
          # Fix permissions and paths
          chmod +x desktop/resources/python-env/bin/*
          cd desktop/resources/python-env
          ./bin/conda-unpack
          
          # Verify numpy and its dependencies
          ./bin/python -c "
          import numpy as np
          import os
          print('NumPy version:', np.__version__)
          print('NumPy location:', np.__file__)
          print('OpenBLAS location:', [f for f in os.listdir('./lib') if 'openblas' in f.lower()])
          "

      - name: Prepare app resources
        run: |
          mkdir -p desktop/resources/app
          cp -R backend desktop/resources/app/backend
          cp -R frontend desktop/resources/app/frontend

      - name: Write .env for packaged app (from GitHub Secrets/Vars)
        run: |
          : > desktop/.env
          echo "USE_MOCK_SERVER=${{ vars.USE_MOCK_SERVER || 'false' }}" >> desktop/.env
          echo "LOG_VERBOSE=${{ vars.LOG_VERBOSE || '2' }}" >> desktop/.env
          echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> desktop/.env
          echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> desktop/.env

      - name: Install desktop deps
        working-directory: desktop
        run: npm ci || npm i

      - name: Build mac artifact (x64, unsigned)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          BUILD_BLOCKMAP: 'false'
        working-directory: desktop
        run: npx electron-builder --mac dmg --x64 --publish=never -c.compression=store

      - name: Upload artifact (x64)
        uses: actions/upload-artifact@v4
        with:
          name: mac-build-x64
          path: desktop/dist/*


