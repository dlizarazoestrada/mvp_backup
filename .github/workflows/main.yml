name: build-mac

on:
  workflow_dispatch: {}

jobs:
  mac-arm64:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Build and Fix Backend Executable
        shell: bash
        run: |
          # 1. Install dependencies based on target architecture
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            echo "--- Installing arm64 dependencies ---"
            arch -arm64 brew install gettext
          else
            echo "--- Installing x64 dependencies ---"
            brew install gettext
          fi
          pip install -r backend/requirements.txt
          
          # 2. Set linker flags (these are for PyInstaller's build-time)
          export LDFLAGS="-L$(brew --prefix gettext)/lib"
          export CPPFLAGS="-I$(brew --prefix gettext)/include"
          
          # 3. Build the executable with PyInstaller
          pyinstaller backend_executable.spec --noconfirm
          
          # 4. --- Post-build manual fix for libintl.8.dylib ---
          echo "--- Starting manual dylib fix for ${{ matrix.arch }} ---"
          
          # Define paths for clarity
          TARGET_BUNDLE_DIR="dist/backend_executable/_internal"
          PYTHON_DYLIB_PATH="$TARGET_BUNDLE_DIR/libpython3.9.dylib"
          
          # Get the correct dylib path for the target architecture
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            GETTEXT_DYLIB_PATH=$(arch -arm64 brew --prefix gettext)/lib/libintl.8.dylib
          else
            GETTEXT_DYLIB_PATH=$(brew --prefix gettext)/lib/libintl.8.dylib
          fi
          echo "Using dylib from: $GETTEXT_DYLIB_PATH"

          # --- DIAGNOSTIC: Show original linked libraries for the Python dylib ---
          echo "--- Original linked libraries for libpython3.9.dylib before patching: ---"
          otool -L "$PYTHON_DYLIB_PATH"
          
          # Copy the dylib directly into the app's bundle
          cp "$GETTEXT_DYLIB_PATH" "$TARGET_BUNDLE_DIR/"
          echo "Copied libintl.8.dylib from Homebrew to the app bundle."
          
          # Use install_name_tool to patch the PYTHON dylib, telling it where to find the gettext dylib.
          install_name_tool -change @rpath/libintl.8.dylib @loader_path/libintl.8.dylib "$PYTHON_DYLIB_PATH"
          echo "Attempted to patch libpython3.9.dylib."
          
          # 5. Verify the fix
          echo "--- Verifying the patch (linked libraries for libpython3.9.dylib after patching): ---"
          otool -L "$PYTHON_DYLIB_PATH"
          
          # 6. Finalize permissions
          chmod +x "dist/backend_executable/backend_executable"

      - name: Inject Secrets into Electron App
        shell: bash
        run: |
          # Use sed to replace placeholders in main.js with actual secrets
          # Note the use of different delimiters for sed to handle special characters in secrets
          sed -i.bak "s|YOUR_CLIENT_ID_PLACEHOLDER|${{ secrets.CLIENT_ID }}|g" "desktop/main.js"
          sed -i.bak "s|YOUR_CLIENT_SECRET_PLACEHOLDER|${{ secrets.CLIENT_SECRET }}|g" "desktop/main.js"
          sed -i.bak "s|'false'|'${{ vars.USE_MOCK_SERVER || 'false' }}'|g" "desktop/main.js"
          sed -i.bak "s|'2'|'${{ vars.LOG_VERBOSE || '2' }}'|g" "desktop/main.js"


      - name: Install desktop deps
        working-directory: desktop
        run: npm ci || npm i

      - name: Build mac artifact (arm64, unsigned)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          BUILD_BLOCKMAP: 'false'
        working-directory: desktop
        run: npx electron-builder --mac --arm64 --publish=never -c.compression=store

      - name: Upload artifact (arm64)
        uses: actions/upload-artifact@v4
        with:
          name: mac-build-arm64
          path: desktop/dist/*

  mac-x64:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Build and Fix Backend Executable (x64)
        shell: bash
        run: |
          # 1. Install dependencies based on target architecture
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            echo "--- Installing arm64 dependencies ---"
            arch -arm64 brew install gettext
          else
            echo "--- Installing x64 dependencies ---"
            brew install gettext
          fi
          pip install -r backend/requirements.txt
          
          # 2. Set linker flags (these are for PyInstaller's build-time)
          export LDFLAGS="-L$(brew --prefix gettext)/lib"
          export CPPFLAGS="-I$(brew --prefix gettext)/include"
          
          # 3. Build the executable with PyInstaller
          pyinstaller backend_executable.spec --noconfirm
          
          # 4. --- Post-build manual fix for libintl.8.dylib ---
          echo "--- Starting manual dylib fix for ${{ matrix.arch }} ---"
          
          # Define paths for clarity
          TARGET_BUNDLE_DIR="dist/backend_executable/_internal"
          PYTHON_DYLIB_PATH="$TARGET_BUNDLE_DIR/libpython3.9.dylib"
          
          # Get the correct dylib path for the target architecture
          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
            GETTEXT_DYLIB_PATH=$(arch -arm64 brew --prefix gettext)/lib/libintl.8.dylib
          else
            GETTEXT_DYLIB_PATH=$(brew --prefix gettext)/lib/libintl.8.dylib
          fi
          echo "Using dylib from: $GETTEXT_DYLIB_PATH"
          
          # --- DIAGNOSTIC: Show original linked libraries for the Python dylib ---
          echo "--- Original linked libraries for libpython3.9.dylib before patching: ---"
          otool -L "$PYTHON_DYLIB_PATH"
          
          # Copy the dylib directly into the app's bundle
          cp "$GETTEXT_DYLIB_PATH" "$TARGET_BUNDLE_DIR/"
          echo "Copied libintl.8.dylib from Homebrew to the app bundle."
          
          # Use install_name_tool to patch the PYTHON dylib, telling it where to find the gettext dylib.
          install_name_tool -change @rpath/libintl.8.dylib @loader_path/libintl.8.dylib "$PYTHON_DYLIB_PATH"
          echo "Attempted to patch libpython3.9.dylib."
          
          # 5. Verify the fix
          echo "--- Verifying the patch (linked libraries for libpython3.9.dylib after patching): ---"
          otool -L "$PYTHON_DYLIB_PATH"
          
          # 6. Finalize permissions
          chmod +x "dist/backend_executable/backend_executable"

      - name: Inject Secrets into Electron App (x64)
        shell: bash
        run: |
          # Use sed to replace placeholders in main.js with actual secrets
          sed -i.bak "s|YOUR_CLIENT_ID_PLACEHOLDER|${{ secrets.CLIENT_ID }}|g" "desktop/main.js"
          sed -i.bak "s|YOUR_CLIENT_SECRET_PLACEHOLDER|${{ secrets.CLIENT_SECRET }}|g" "desktop/main.js"
          sed -i.bak "s|'true'|'${{ vars.USE_MOCK_SERVER || 'false' }}'|g" "desktop/main.js"
          sed -i.bak "s|'2'|'${{ vars.LOG_VERBOSE || '2' }}'|g" "desktop/main.js"


      - name: Install desktop deps
        working-directory: desktop
        run: npm ci || npm i

      - name: Build mac artifact (x64, unsigned)
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: 'false'
          BUILD_BLOCKMAP: 'false'
        working-directory: desktop
        run: npx electron-builder --mac --x64 --publish=never -c.compression=store

      - name: Upload artifact (x64)
        uses: actions/upload-artifact@v4
        with:
          name: mac-build-x64
          path: desktop/dist/*


